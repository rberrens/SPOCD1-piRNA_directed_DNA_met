table <- read.table("/Users/ykabayam/Documents/sRNA-seq/Ansgar/Processed/v3/view/spocd1_sRNA_full_table_v3.txt", sep="\t", stringsAsFactors = FALSE, header = FALSE)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ggrastr)
library(stringr)
table <- read.table("/Users/ykabayam/Documents/sRNA-seq/Ansgar/Processed/v3/view/spocd1_sRNA_full_table_v3.txt", sep="\t", stringsAsFactors = FALSE, header = FALSE)
table <- read.table("/Users/ykabayam/Documents/sRNA-seq/Ansgar/Processed/v3/view/spocd1_sRNA_full_table_v3.txt", sep="\t", stringsAsFactors = FALSE, header = FALSE)
colnames(table) <- c("sequence", "length", "count", "subclass", "subfamily", "family", "class", "sample", "condition", "normF")
pirna <- table %>% dplyr::select(sequence, length, count, sample, subclass, subfamily, family, condition) %>% filter(length >= 25, length <= 30) %>% unique()
#individual sample
count_group <- pirna %>% group_by(sample, family) %>% summarise(count_family = sum(count)) %>% filter(!family %in% c("LINE?", "LTR?", "SINE?", "miRNA", "tegRNA")) %>% ungroup()
count_group$family2 <- factor(count_group$family, levels = c("others", "nrRNA", "ncRNA", "genes", "LINE", "SINE", "LTR"))
#merged replicates
count_group_con <- pirna %>% group_by(condition, family) %>% summarise(count_family = sum(count)) %>% filter(!family %in% c("LINE?", "LTR?", "SINE?", "miRNA", "tegRNA")) %>% ungroup()
count_group_con$family2 <- factor(count_group_con$family, levels = c("others", "nrRNA", "ncRNA", "genes", "LINE", "SINE", "LTR"))
#individual sample, devide LTR into IAP or non-IAP
count_group2 <- pirna %>% group_by(sample, family) %>% summarise(count_family = sum(count)) %>% filter(!family %in% c("LINE?", "LTR", "LTR?", "SINE?", "miRNA", "tegRNA")) %>% ungroup()
count_IAP <- pirna %>% filter(family == "LTR", stringr::str_detect(subclass, "IAP")) %>% group_by(sample, family) %>% summarise(count_family = sum(count)) %>% mutate(family= "IAP")
count_non_IAP <- pirna %>% filter(family == "LTR", !stringr::str_detect(subclass, "IAP")) %>% group_by(sample, family) %>% summarise(count_family = sum(count))
merge <- bind_rows(count_group2, count_IAP, count_non_IAP)
merge$family2 <- factor(merge$family, levels = c("others", "nrRNA", "ncRNA", "genes", "LINE", "SINE", "LTR", "IAP"))
#merged replicates WT vs KO
count_group_con2 <- pirna %>% group_by(condition, family) %>% summarise(count_family = sum(count)) %>% filter(!family %in% c("LINE?", "LTR", "LTR?", "SINE?", "miRNA", "tegRNA")) %>% ungroup()
count_IAP_con <- pirna %>% filter(family == "LTR", stringr::str_detect(subclass, "IAP")) %>% group_by(condition, family) %>%
summarise(count_family = sum(count)) %>% mutate(family= "IAP")
count_non_IAP_con <- pirna %>% filter(family == "LTR", !stringr::str_detect(subclass, "IAP")) %>% group_by(condition, family) %>%
summarise(count_family = sum(count))
merge_con <- bind_rows(count_group_con2, count_IAP_con, count_non_IAP_con)
merge_con$family2 <- factor(merge_con$family, levels = c("others", "nrRNA", "ncRNA", "genes", "LINE", "SINE", "LTR", "IAP"))
unique_read <- table %>% dplyr::select(sequence, length, count, sample, condition, normF) %>% filter(length >= 18, length <= 32) %>% unique()
length_dist_norm <- unique_read %>% group_by(sample) %>% summarise(normalize = sum(count)) %>% ungroup() %>% dplyr::select(sample, normalize)
length_dist <- unique_read %>% group_by(length, sample, condition) %>% summarise(count_length = sum(count))
length_summary <- length_dist %>% left_join(length_dist_norm) %>% rowwise() %>%
mutate(freq = count_length/normalize) %>% dplyr::select(length, sample, freq, condition)
unique_read_TE <- table %>% filter(class == "teRNA") %>% select(sequence, length, count, sample, condition) %>% filter(length >= 18, length <= 32) %>% unique()
length_dist_TE <- unique_read_TE %>% group_by(length, sample, condition) %>% summarise(count_length = sum(count))
length_dist_TE_norm <- unique_read_TE %>% group_by(sample) %>% summarise(normalize = sum(count)) %>% ungroup() %>% select(sample, normalize)
unique_read_TE_summary <- length_dist_TE %>% left_join(length_dist_TE_norm) %>% rowwise() %>%
mutate(freq = count_length/normalize) %>% select(length, sample, freq, condition)
unique_read_IAP <- table %>% filter(family == "LTR", str_detect(subclass, "IAP")) %>% select(sequence, length, count, sample, condition) %>% filter(length >= 18, length <= 32) %>% unique()
length_dist_IAP <- unique_read_IAP %>% group_by(length, sample, condition) %>% summarise(count_length = sum(count))
length_IAP_summary <- length_dist_IAP %>% left_join(length_dist_TE_norm) %>% rowwise() %>%
mutate(freq = count_length/normalize) %>% select(length, sample, freq, condition)
unique_read_LINE <- table %>% filter(family == "LINE") %>% select(sequence, length, count, sample, condition) %>% filter(length >= 18, length <= 32) %>% unique()
length_dist_LINE <- unique_read_LINE %>% group_by(length, sample, condition) %>% summarise(count_length = sum(count))
length_LINE_summary <- length_dist_LINE %>% left_join(length_dist_TE_norm) %>% rowwise() %>%
mutate(freq = count_length/normalize) %>% select(length, sample, freq, condition)
length <- length_summary %>% filter(length == 18)
t.test(length$ratio[length$Condition=="Control"], length$ratio[length$Condition=="Spocd1_KO"], var.equal = T)
View(length)
length <- length_summary %>% filter(length == 18)
t.test(length$freq[length$Condition=="Control"], length$freq[length$Condition=="Spocd1_KO"], var.equal = T)
length <- length_summary %>% filter(length == 18)
t.test(length$freq[length$condition=="Control"], length$freq[length$condition=="Spocd1_KO"], var.equal = T)
length <- length_summary %>% filter(length == 18)
t.test(length$freq[length$condition=="Control_S"], length$freq[length$condition=="Spocd1_KO"], var.equal = T)
classes <- pirna %>% group_by(sequence, condition) %>% summarise(count_sum = sum(count)) %>%
filter(count_sum > 10)
spread <- classes %>% unique() %>% spread(condition, count_sum)
spread[is.na(spread)]<-0
x <- spread %>% ungroup() %>% dplyr::select(c(Control_S))
y <- spread %>% ungroup() %>% dplyr::select(c(Spocd1_KO))
cor(x, y)
C1_L1 <- read.table("/Users/ykabayam/Documents/sRNA-seq/Ansgar/Processed/v3/pingpong/C1_consensus_L1A_v3_gapcount.txt", sep="\t", stringsAsFactors = FALSE, header = FALSE)
colnames(C1_L1) <- c("gap", "count")
C1_L1 <- C1_L1 %>% mutate(count_sum = sum(count)) %>% mutate(freq = (count/count_sum)) %>% mutate(sample = "Control_1") %>% dplyr::select("gap", "freq", "sample")
C2_L1 <- read.table("/Users/ykabayam/Documents/sRNA-seq/Ansgar/Processed/v3/pingpong/C2_consensus_L1A_v3_gapcount.txt", sep="\t", stringsAsFactors = FALSE, header = FALSE)
colnames(C2_L1) <- c("gap", "count")
C2_L1 <- C2_L1 %>% mutate(count_sum = sum(count)) %>% mutate(freq = (count/count_sum)) %>% mutate(sample = "Control_2") %>% dplyr::select("gap", "freq", "sample")
C3_L1 <- read.table("/Users/ykabayam/Documents/sRNA-seq/Ansgar/Processed/v3/pingpong/C3_consensus_L1A_v3_gapcount.txt", sep="\t", stringsAsFactors = FALSE, header = FALSE)
colnames(C3_L1) <- c("gap", "count")
C3_L1 <- C3_L1 %>% mutate(count_sum = sum(count)) %>% mutate(freq = (count/count_sum)) %>% mutate(sample = "Control_3") %>% dplyr::select("gap", "freq", "sample")
KO1_L1 <- read.table("/Users/ykabayam/Documents/sRNA-seq/Ansgar/Processed/v3/pingpong/KO1_consensus_L1A_v3_gapcount.txt", sep="\t", stringsAsFactors = FALSE, header = FALSE)
C1_L1 <- read.table("/Users/ykabayam/Documents/sRNA-seq/Ansgar/Processed/v3/pingpong/C1_consensus_L1A_v3_gapcount.txt", sep="\t", stringsAsFactors = FALSE, header = FALSE)
colnames(C1_L1) <- c("gap", "count")
C1_L1 <- C1_L1 %>% mutate(count_sum = sum(count)) %>% mutate(freq = (count/count_sum)) %>% mutate(sample = "Control_1") %>% dplyr::select("gap", "freq", "sample")
C2_L1 <- read.table("/Users/ykabayam/Documents/sRNA-seq/Ansgar/Processed/v3/pingpong/C2_consensus_L1A_v3_gapcount.txt", sep="\t", stringsAsFactors = FALSE, header = FALSE)
colnames(C2_L1) <- c("gap", "count")
C2_L1 <- C2_L1 %>% mutate(count_sum = sum(count)) %>% mutate(freq = (count/count_sum)) %>% mutate(sample = "Control_2") %>% dplyr::select("gap", "freq", "sample")
C3_L1 <- read.table("/Users/ykabayam/Documents/sRNA-seq/Ansgar/Processed/v3/pingpong/C3_consensus_L1A_v3_gapcount.txt", sep="\t", stringsAsFactors = FALSE, header = FALSE)
colnames(C3_L1) <- c("gap", "count")
C3_L1 <- C3_L1 %>% mutate(count_sum = sum(count)) %>% mutate(freq = (count/count_sum)) %>% mutate(sample = "Control_3") %>% dplyr::select("gap", "freq", "sample")
KO1_L1 <- read.table("/Users/ykabayam/Documents/sRNA-seq/Ansgar/Processed/v3/pingpong/S1_consensus_L1A_v3_gapcount.txt", sep="\t", stringsAsFactors = FALSE, header = FALSE)
colnames(KO1_L1) <- c("gap", "count")
KO1_L1 <- KO1_L1 %>% mutate(count_sum = sum(count)) %>% mutate(freq = (count/count_sum)) %>% mutate(sample = "Spocd1_KO1") %>% dplyr::select("gap", "freq", "sample")
KO2_L1 <- read.table("/Users/ykabayam/Documents/sRNA-seq/Ansgar/Processed/v3/pingpong/S2_consensus_L1A_v3_gapcount.txt", sep="\t", stringsAsFactors = FALSE, header = FALSE)
colnames(KO2_L1) <- c("gap", "count")
KO2_L1 <- KO2_L1 %>% mutate(count_sum = sum(count)) %>% mutate(freq = (count/count_sum)) %>% mutate(sample = "Spocd1_KO2") %>% dplyr::select("gap", "freq", "sample")
KO3_L1 <- read.table("/Users/ykabayam/Documents/sRNA-seq/Ansgar/Processed/v3/pingpong/S3_consensus_L1A_v3_gapcount.txt", sep="\t", stringsAsFactors = FALSE, header = FALSE)
colnames(KO3_L1) <- c("gap", "count")
KO3_L1 <- KO3_L1 %>% mutate(count_sum = sum(count)) %>% mutate(freq = (count/count_sum)) %>% mutate(sample = "Spocd1_KO3") %>% dplyr::select("gap", "freq", "sample")
merge <- bind_rows(C1_L1, C2_L1, C3_L1, KO1_L1, KO2_L1, KO3_L1)
p <- ggplot(data=merge, aes(x=gap, y=freq, fill = sample, colour = sample)) +
theme_classic(base_size = 15) +
geom_line(size = 0.5, stat="identity") + scale_colour_manual(values = c("#000000", "#333333", "#555555", "#99CCFF", "#3399CC", "#0099CC")) +
#  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.2)) +
scale_x_continuous(expand = c(0, 0), limits = c(0, 30)) +
labs(title="Overlap of sense-antisense L1Md_A piRNAs",x="Nucleotides", y="Frequency")
p
p <- ggplot(data=merge, aes(x=gap, y=freq, fill = sample, colour = sample)) +
theme_classic(base_size = 15) +
geom_line(size = 0.5, stat="identity") +
scale_colour_manual(values = c("#000000", "#333333", "#555555", "#99CCFF", "#3399CC", "#0099CC")) +
scale_y_continuous(expand = c(0, 0)) +
scale_x_continuous(expand = c(0, 0), limits = c(0, 30)) +
labs(title="Overlap of sense-antisense L1Md_A piRNAs",x="Nucleotides", y="Frequency")
p
C1_L1 <- read.table("/Users/ykabayam/Documents/sRNA-seq/Ansgar/Processed/v3/FUTA/C1_L1A_nuc_count.txt", sep="\t", stringsAsFactors = FALSE, header = FALSE)
colnames(C1_L1) <- c("position", "nucleotide", "count")
C1_L1 <- C1_L1 %>% group_by(position) %>% mutate(count_sum = sum(count)) %>% mutate(freq = (count/count_sum)) %>% mutate(sample = "Control_1") %>% mutate(condition = "Control") %>% dplyr::select("position", "nucleotide", "freq", "sample", "condition")
C2_L1 <- read.table("/Users/ykabayam/Documents/sRNA-seq/Ansgar/Processed/v3/FUTA/C2_L1A_nuc_count.txt", sep="\t", stringsAsFactors = FALSE, header = FALSE)
colnames(C2_L1) <- c("position", "nucleotide", "count")
C2_L1 <- C2_L1 %>% group_by(position) %>% mutate(count_sum = sum(count)) %>% mutate(freq = (count/count_sum)) %>% mutate(sample = "Control_2") %>% mutate(condition = "Control") %>% dplyr::select("position", "nucleotide", "freq", "sample", "condition")
C3_L1 <- read.table("/Users/ykabayam/Documents/sRNA-seq/Ansgar/Processed/v3/FUTA/C3_L1A_nuc_count.txt", sep="\t", stringsAsFactors = FALSE, header = FALSE)
colnames(C3_L1) <- c("position", "nucleotide", "count")
C3_L1 <- C3_L1 %>% group_by(position) %>% mutate(count_sum = sum(count)) %>% mutate(freq = (count/count_sum)) %>% mutate(sample = "Control_3") %>% mutate(condition = "Control") %>% dplyr::select("position", "nucleotide", "freq", "sample", "condition")
KO1_L1 <- read.table("/Users/ykabayam/Documents/sRNA-seq/Ansgar/Processed/v3/FUTA/S1_L1A_nuc_count.txt", sep="\t", stringsAsFactors = FALSE, header = FALSE)
colnames(KO1_L1) <- c("position", "nucleotide", "count")
KO1_L1 <- KO1_L1 %>% group_by(position) %>% mutate(count_sum = sum(count)) %>% mutate(freq = (count/count_sum)) %>% mutate(sample = "Spocd1_KO1") %>% mutate(condition = "Spocd1_KO") %>% dplyr::select("position", "nucleotide", "freq", "sample", "condition")
KO2_L1 <- read.table("/Users/ykabayam/Documents/sRNA-seq/Ansgar/Processed/v3/FUTA/S2_L1A_nuc_count.txt", sep="\t", stringsAsFactors = FALSE, header = FALSE)
colnames(KO2_L1) <- c("position", "nucleotide", "count")
KO2_L1 <- KO2_L1 %>% group_by(position) %>% mutate(count_sum = sum(count)) %>% mutate(freq = (count/count_sum)) %>% mutate(sample = "Spocd1_KO2") %>% mutate(condition = "Spocd1_KO") %>% dplyr::select("position", "nucleotide", "freq", "sample", "condition")
KO3_L1 <- read.table("/Users/ykabayam/Documents/sRNA-seq/Ansgar/Processed/v3/FUTA/S3_L1A_nuc_count.txt", sep="\t", stringsAsFactors = FALSE, header = FALSE)
colnames(KO3_L1) <- c("position", "nucleotide", "count")
KO3_L1 <- KO3_L1 %>% group_by(position) %>% mutate(count_sum = sum(count)) %>% mutate(freq = (count/count_sum)) %>% mutate(sample = "Spocd1_KO3") %>% mutate(condition = "Spocd1_KO") %>% dplyr::select("position", "nucleotide", "freq", "sample", "condition")
all <- bind_rows(C1_L1, C2_L1, C3_L1, KO1_L1, KO2_L1, KO3_L1)
FirstU <- all %>% filter(position == "First", nucleotide == "T") %>% dplyr::select(-sample)
TenthA <- all %>% filter(position == "Tenth", nucleotide == "A") %>% dplyr::select(-sample)
p <- ggplot(data = TenthA, aes(y=freq, x=condition)) + theme_classic(base_size = 15)
p <- p + stat_summary(aes(fill=condition), fun.y=mean, geom = "bar", colour = "black", position = "dodge", width = 0.5)
p <- p + stat_summary(aes(group=condition), fun.data = mean_se, geom = "errorbar", size = 0.5, width=0.1) +
scale_fill_manual(values = c("gray", "#3399CC")) +
scale_y_continuous(expand = c(0,0), limits = c(0, 0.8)) +
geom_dotplot(data = TenthA, binwidth = 0.001, dotsize = 15, stackdir = "center", alpha = 0.7, position = "identity",
binaxis = "y", method = "histodot", binpositions = "bygroup") +
labs(title="Nucleotide preference L1Md_A 10A",x="Condition", y="Frequency")
p
t.test(FirstU$freq[FirstU$condition=="Control"], FirstU$freq[FirstU$condition=="Spocd1_KO"], var.equal = T)
t.test(TenthA$freq[TenthA$condition=="Control"], TenthA$freq[TenthA$condition=="Spocd1_KO"], var.equal = T)
